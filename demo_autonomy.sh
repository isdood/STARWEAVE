#!/bin/bash

# STARWEAVE Autonomy Demonstration Script
# This script demonstrates the novel autonomous capabilities of STARWEAVE

echo "üåå STARWEAVE Autonomy Demonstration"
echo "====================================="
echo ""

# Check if STARWEAVE is running
if ! pgrep -f "mix phx.server" > /dev/null; then
    echo "‚ùå STARWEAVE web server is not running."
    echo "   Please start it with: cd apps/starweave_web && mix phx.server"
    echo ""
    echo "   Once running, visit: http://localhost:4000"
    echo "   And the autonomy dashboard at: http://localhost:4000/autonomy"
    exit 1
fi

echo "‚úÖ STARWEAVE is running"
echo ""

# Function to make API calls to demonstrate autonomy
demonstrate_autonomy() {
    echo "üöÄ Demonstrating Autonomous Learning Features"
    echo "---------------------------------------------"
    echo ""

    # 1. Trigger a learning cycle
    echo "1Ô∏è‚É£ Triggering autonomous learning cycle..."
    curl -s -X POST http://localhost:4000/api/autonomy/trigger-learning \
         -H "Content-Type: application/json" \
         -d '{}' | jq '.'
    echo ""
    sleep 2

    # 2. Trigger knowledge acquisition
    echo "2Ô∏è‚É£ Triggering knowledge acquisition..."
    curl -s -X POST http://localhost:4000/api/autonomy/trigger-knowledge \
         -H "Content-Type: application/json" \
         -d '{}' | jq '.'
    echo ""
    sleep 2

    # 3. Get autonomy status
    echo "3Ô∏è‚É£ Checking autonomy status..."
    curl -s http://localhost:4000/api/autonomy/status | jq '.'
    echo ""
    sleep 2

    # 4. Demonstrate pattern evolution
    echo "4Ô∏è‚É£ Demonstrating pattern evolution..."
    curl -s -X POST http://localhost:4000/api/patterns/evolve \
         -H "Content-Type: application/json" \
         -d '{"pattern_id": "demo_pattern", "iterations": 3}' | jq '.'
    echo ""
    sleep 2

    # 5. Show memory consolidation
    echo "5Ô∏è‚É£ Demonstrating memory consolidation..."
    curl -s -X POST http://localhost:4000/api/memory/consolidate \
         -H "Content-Type: application/json" \
         -d '{}' | jq '.'
    echo ""
}

# Function to show real-time dashboard
show_dashboard() {
    echo "üìä Real-time Autonomy Dashboard"
    echo "==============================="
    echo ""
    echo "The autonomy dashboard shows:"
    echo "‚Ä¢ Continuous learning cycles (every 30 minutes)"
    echo "‚Ä¢ Knowledge acquisition (every 6 hours)"
    echo "‚Ä¢ Self-reflection (daily)"
    echo "‚Ä¢ Active autonomous goals"
    echo "‚Ä¢ Pattern evolution metrics"
    echo "‚Ä¢ Memory usage and consolidation"
    echo ""
    echo "üåê Visit: http://localhost:4000/autonomy"
    echo ""
}

# Function to explain novel features
explain_novel_features() {
    echo "‚ú® STARWEAVE's Novel Capabilities"
    echo "================================="
    echo ""
    echo "üîÑ CONTINUOUS AUTONOMOUS LEARNING:"
    echo "   ‚Ä¢ Learning cycles run every 30 minutes independent of user interaction"
    echo "   ‚Ä¢ System analyzes patterns and generates insights automatically"
    echo "   ‚Ä¢ Self-directed goal creation and pursuit"
    echo ""
    echo "üìö KNOWLEDGE ACQUISITION:"
    echo "   ‚Ä¢ Automated gathering of information from external sources"
    echo "   ‚Ä¢ Integration of new knowledge into existing pattern systems"
    echo "   ‚Ä¢ Cross-domain pattern recognition and linking"
    echo ""
    echo "ü§î SELF-REFLECTION:"
    echo "   ‚Ä¢ Daily analysis of system performance and patterns"
    echo "   ‚Ä¢ Generation of optimization opportunities"
    echo "   ‚Ä¢ Autonomous goal creation based on insights"
    echo ""
    echo "üéØ DISTRIBUTED INTELLIGENCE:"
    echo "   ‚Ä¢ Pattern processing distributed across multiple nodes"
    echo "   ‚Ä¢ Fault-tolerant memory systems with replication"
    echo "   ‚Ä¢ Resource-optimized processing based on node capabilities"
    echo ""
    echo "üåå RESONANCE-BASED PROCESSING:"
    echo "   ‚Ä¢ Energy-state based pattern recognition"
    echo "   ‚Ä¢ Resonance field for information integration"
    echo "   ‚Ä¢ Emergent consciousness through distributed processing"
    echo ""
}

# Function to show comparison with traditional AI
show_comparison() {
    echo "üîç STARWEAVE vs Traditional AI"
    echo "==============================="
    echo ""
    echo "TRADITIONAL AI:              | STARWEAVE:"
    echo "-----------------------------|-----------------------------"
    echo "‚ùå User-dependent operation   | ‚úÖ Continuous autonomous operation"
    echo "‚ùå Static knowledge base      | ‚úÖ Dynamic knowledge acquisition"
    echo "‚ùå Centralized processing     | ‚úÖ Distributed intelligence"
    echo "‚ùå Fixed goals and behaviors  | ‚úÖ Self-directed goal evolution"
    echo "‚ùå Limited self-reflection    | ‚úÖ Comprehensive self-analysis"
    echo "‚ùå Single-node operation      | ‚úÖ Multi-node fault tolerance"
    echo ""
}

# Main demonstration
case "${1:-demo}" in
    "demo")
        demonstrate_autonomy
        ;;
    "dashboard")
        show_dashboard
        ;;
    "features")
        explain_novel_features
        ;;
    "comparison")
        show_comparison
        ;;
    "all")
        demonstrate_autonomy
        echo ""
        show_dashboard
        echo ""
        explain_novel_features
        echo ""
        show_comparison
        ;;
    *)
        echo "Usage: $0 {demo|dashboard|features|comparison|all}"
        echo ""
        echo "Commands:"
        echo "  demo       - Run autonomy demonstration"
        echo "  dashboard  - Show dashboard information"
        echo "  features   - Explain novel capabilities"
        echo "  comparison - Compare with traditional AI"
        echo "  all        - Run all demonstrations"
        exit 1
        ;;
esac

echo ""
echo "üéâ Demonstration Complete!"
echo ""
echo "Key Takeaways:"
echo "‚Ä¢ STARWEAVE operates continuously, independent of user interaction"
echo "‚Ä¢ The system learns, evolves, and optimizes itself autonomously"
echo "‚Ä¢ Distributed architecture provides fault tolerance and scalability"
echo "‚Ä¢ Novel resonance-based processing enables emergent intelligence"
echo ""
echo "Visit http://localhost:4000/autonomy to see it in action!"
echo ""
