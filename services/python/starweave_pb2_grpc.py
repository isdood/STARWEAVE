# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import starweave_pb2 as starweave__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in starweave_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PatternServiceStub(object):
    """The Pattern Recognition service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RecognizePattern = channel.unary_unary(
                '/starweave.PatternService/RecognizePattern',
                request_serializer=starweave__pb2.PatternRequest.SerializeToString,
                response_deserializer=starweave__pb2.PatternResponse.FromString,
                _registered_method=True)
        self.StreamPatterns = channel.stream_stream(
                '/starweave.PatternService/StreamPatterns',
                request_serializer=starweave__pb2.PatternRequest.SerializeToString,
                response_deserializer=starweave__pb2.PatternResponse.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/starweave.PatternService/GetStatus',
                request_serializer=starweave__pb2.StatusRequest.SerializeToString,
                response_deserializer=starweave__pb2.StatusResponse.FromString,
                _registered_method=True)


class PatternServiceServicer(object):
    """The Pattern Recognition service definition
    """

    def RecognizePattern(self, request, context):
        """Process a pattern and return recognition results
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamPatterns(self, request_iterator, context):
        """Stream patterns for real-time processing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Get system status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PatternServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RecognizePattern': grpc.unary_unary_rpc_method_handler(
                    servicer.RecognizePattern,
                    request_deserializer=starweave__pb2.PatternRequest.FromString,
                    response_serializer=starweave__pb2.PatternResponse.SerializeToString,
            ),
            'StreamPatterns': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamPatterns,
                    request_deserializer=starweave__pb2.PatternRequest.FromString,
                    response_serializer=starweave__pb2.PatternResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=starweave__pb2.StatusRequest.FromString,
                    response_serializer=starweave__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'starweave.PatternService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('starweave.PatternService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PatternService(object):
    """The Pattern Recognition service definition
    """

    @staticmethod
    def RecognizePattern(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/starweave.PatternService/RecognizePattern',
            starweave__pb2.PatternRequest.SerializeToString,
            starweave__pb2.PatternResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamPatterns(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/starweave.PatternService/StreamPatterns',
            starweave__pb2.PatternRequest.SerializeToString,
            starweave__pb2.PatternResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/starweave.PatternService/GetStatus',
            starweave__pb2.StatusRequest.SerializeToString,
            starweave__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ImageGenerationServiceStub(object):
    """Image Generation Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateImage = channel.unary_unary(
                '/starweave.ImageGenerationService/GenerateImage',
                request_serializer=starweave__pb2.ImageRequest.SerializeToString,
                response_deserializer=starweave__pb2.ImageResponse.FromString,
                _registered_method=True)
        self.GenerateImageVariations = channel.unary_stream(
                '/starweave.ImageGenerationService/GenerateImageVariations',
                request_serializer=starweave__pb2.ImageVariationsRequest.SerializeToString,
                response_deserializer=starweave__pb2.ImageResponse.FromString,
                _registered_method=True)
        self.GetImageModels = channel.unary_unary(
                '/starweave.ImageGenerationService/GetImageModels',
                request_serializer=starweave__pb2.ModelRequest.SerializeToString,
                response_deserializer=starweave__pb2.ModelResponse.FromString,
                _registered_method=True)


class ImageGenerationServiceServicer(object):
    """Image Generation Service
    """

    def GenerateImage(self, request, context):
        """Generate image from text description
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateImageVariations(self, request, context):
        """Generate multiple images with variations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetImageModels(self, request, context):
        """Get available models and capabilities
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageGenerationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateImage': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateImage,
                    request_deserializer=starweave__pb2.ImageRequest.FromString,
                    response_serializer=starweave__pb2.ImageResponse.SerializeToString,
            ),
            'GenerateImageVariations': grpc.unary_stream_rpc_method_handler(
                    servicer.GenerateImageVariations,
                    request_deserializer=starweave__pb2.ImageVariationsRequest.FromString,
                    response_serializer=starweave__pb2.ImageResponse.SerializeToString,
            ),
            'GetImageModels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetImageModels,
                    request_deserializer=starweave__pb2.ModelRequest.FromString,
                    response_serializer=starweave__pb2.ModelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'starweave.ImageGenerationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('starweave.ImageGenerationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ImageGenerationService(object):
    """Image Generation Service
    """

    @staticmethod
    def GenerateImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/starweave.ImageGenerationService/GenerateImage',
            starweave__pb2.ImageRequest.SerializeToString,
            starweave__pb2.ImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateImageVariations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/starweave.ImageGenerationService/GenerateImageVariations',
            starweave__pb2.ImageVariationsRequest.SerializeToString,
            starweave__pb2.ImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetImageModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/starweave.ImageGenerationService/GetImageModels',
            starweave__pb2.ModelRequest.SerializeToString,
            starweave__pb2.ModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
